@startuml
class Product {
- name_: str
- price_: double

+ __init__(self, name: str, price: double)
+ get_price(): double
+ get_name(): str
}

class ServerErr{
}

class TooManyProductsFoundError{
+ __init__(self, message)
}


class Client{

}

ServerErr <|-- TooManyProductsFoundError
Exceptions <|-- ServerErr

abstract class Server {
- n_max_returned_entries_: int
+ {abstract} search_in_products(n: int): List[Product]
+ {abstract} to_many_products_error(): ToManyProductsFoundError
}

class ListServer {
- products_list_: List[Product]
+ __init__(self, products_list: List[Product], n_max_returned_entries: int)
+ search_in_products(n: int): List[Product]
+ to_many_products_error(): ToManyProductsFoundError
}

class MapServer {
- products_dict_: Dict[Product]
+ __init__(self, products_dict: Dict[Product], n_max_returned_entries: int)
+ search_in_products(n: int): Dict[str ,Product]
+ to_many_products_error(): ToManyProductsFoundError
}

class Client {
- server_: Server
+ cost_of_all(n: int):
}

Server <|-- ListServer
Server <|-- MapServer
ListServer *-- Product
MapServer *-- Product
Server ..> TooManyProductsFoundError : << uses >> Client o-- Server
@enduml
