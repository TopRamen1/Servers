@startuml
class Product {
+ name: str
+ price: double

+ _init__(self, name: str, price_: double)
+ __hash__(self)
+ __eq__(self, other)
}

class ServerErr{
+ __init__(self, msg):
}

class TooManyProductsFoundError{
+ __init__(self, msg)
}


ServerErr <|-- TooManyProductsFoundError
Exceptions <|-- ServerErr

abstract class Server {
+ n_max_returned_entries: int
+ {abstract} get_entries(self, n: int): List[Product]
+ {abstract} to_many_products_error(self): ToManyProductsFoundError
}


class ListServer {
+ products_list: List[Product]
+ __init__(self, products_list: List[Product])
+ get_entries(self, n_letters: int): List[Product]
+ to_many_products_error(self): ToManyProductsFoundError
}


class MapServer {
+ products_dict: Dict[Product]
+ __init__(self, products_list: List[Product])
+ get_entries(self, n_letters: int): Dict[str ,Product]
+ to_many_products_error(self): ToManyProductsFoundError
}


class Client {
+ server_: Server
+ _init__(self, server: Server)
+ get_total_price(self, n_letters: int):
}

Server <|-- ListServer
Server <|-- MapServer
ListServer *-- Product
MapServer *-- Product
Client o-- Server
Server ..> TooManyProductsFoundError : << uses >>
@enduml
